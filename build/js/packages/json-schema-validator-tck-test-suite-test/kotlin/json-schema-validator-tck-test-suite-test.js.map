{"version":3,"file":"json-schema-validator-tck-test-suite-test.js","sources":["Assertions.kt","common/src/generated/_Collections.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/TckFunctions.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/AdditionalItemsTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/AdditionalPropertiesTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/AllOfTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/AnyOfTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/DefaultTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/DependenciesTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/EnumTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/FormatTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/ItemsTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/MaxItemsTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/MaxLengthTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/MaxPropertiesTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/MaximumTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/MinItemsTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/MinLengthTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/MinPropertiesTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/MinimumTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/MultipleOfTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/NotTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/OneOfTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/PatternPropertiesTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/PatternTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/PropertiesTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/RequiredTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/TypeTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/BignumTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/Ecmascript-regexTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/Float-overflowTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/Non-bmp-regexTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/UnicodeTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/ZeroTerminatedFloatsTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/format/Date-timeTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/format/EmailTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/format/HostnameTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/format/Ipv4Test.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/format/Ipv6Test.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/tck/draft4/optional/format/UriTest.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/testing/JsonParsingHelper.kt","js/src/kotlin/text/string.kt","../../../../../tck-test-suite/src/commonTest/kotlin/org/validator/testing/KotlinXJsonElementAdapter.kt","../../../../../tck-test-suite/src/jsTest/kotlin/org/validator/org.validator.testing/PlatformLoader.kt","../../../../../tck-test-suite/src/jsTest/kotlin/org/validator/org.validator.testing/PlatformLoaderTest.kt"],"sourcesContent":["/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/**\n * A number of helper methods for writing unit tests.\n */\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"AssertionsKt\")\n@file:Suppress(\"INVISIBLE_MEMBER\", \"INVISIBLE_REFERENCE\")\n\npackage kotlin.test\n\nimport kotlin.contracts.*\nimport kotlin.internal.*\nimport kotlin.jvm.JvmName\nimport kotlin.native.concurrent.ThreadLocal\nimport kotlin.reflect.KClass\nimport kotlin.reflect.KType\nimport kotlin.reflect.typeOf\n\n/**\n * Current adapter providing assertion implementations\n */\nval asserter: Asserter\n    get() = _asserter ?: lookupAsserter()\n\n/** Used to override current asserter internally */\n@ThreadLocal\ninternal var _asserter: Asserter? = null\n\n/** Asserts that the given [block] returns `true`. */\n@JvmName(\"assertTrueInline\")\n@InlineOnly\ninline fun assertTrue(message: String? = null, block: () -> Boolean) {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    assertTrue(block(), message)\n}\n\n/** Asserts that the expression is `true` with an optional [message]. */\nfun assertTrue(actual: Boolean, message: String? = null) {\n    contract { returns() implies actual }\n    return asserter.assertTrue(message ?: \"Expected value to be true.\", actual)\n}\n\n/** Asserts that the given [block] returns `false`. */\n@JvmName(\"assertFalseInline\")\n@InlineOnly\ninline fun assertFalse(message: String? = null, block: () -> Boolean) {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    assertFalse(block(), message)\n}\n\n/** Asserts that the expression is `false` with an optional [message]. */\nfun assertFalse(actual: Boolean, message: String? = null) {\n    contract { returns() implies (!actual) }\n    return asserter.assertTrue(message ?: \"Expected value to be false.\", !actual)\n}\n\n/** Asserts that the [expected] value is equal to the [actual] value, with an optional [message]. */\nfun <@OnlyInputTypes T> assertEquals(expected: T, actual: T, message: String? = null) {\n    asserter.assertEquals(message, expected, actual)\n}\n\n/** Asserts that the difference between the [actual] and the [expected] is within an [absoluteTolerance], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertEquals(expected: Double, actual: Double, absoluteTolerance: Double, message: String? = null) {\n    checkDoublesAreEqual(expected, actual, absoluteTolerance, message)\n}\n\n/** Asserts that the difference between the [actual] and the [expected] is within an [absoluteTolerance], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertEquals(expected: Float, actual: Float, absoluteTolerance: Float, message: String? = null) {\n    checkFloatsAreEqual(expected, actual, absoluteTolerance, message)\n}\n\n/** Asserts that the [actual] value is not equal to the illegal value, with an optional [message]. */\nfun <@OnlyInputTypes T> assertNotEquals(illegal: T, actual: T, message: String? = null) {\n    asserter.assertNotEquals(message, illegal, actual)\n}\n\n/** Asserts that the difference between the [actual] and the [illegal] is not within an [absoluteTolerance], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertNotEquals(illegal: Double, actual: Double, absoluteTolerance: Double, message: String? = null) {\n    checkDoublesAreEqual(illegal, actual, absoluteTolerance, message, shouldFail = true)\n}\n\n/** Asserts that the difference between the [actual] and the [illegal] is not within an [absoluteTolerance], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertNotEquals(illegal: Float, actual: Float, absoluteTolerance: Float, message: String? = null) {\n    checkFloatsAreEqual(illegal, actual, absoluteTolerance, message, shouldFail = true)\n}\n\n/** Asserts that [expected] is the same instance as [actual], with an optional [message]. */\nfun <@OnlyInputTypes T> assertSame(expected: T, actual: T, message: String? = null) {\n    asserter.assertSame(message, expected, actual)\n}\n\n/** Asserts that [actual] is not the same instance as [illegal], with an optional [message]. */\nfun <@OnlyInputTypes T> assertNotSame(illegal: T, actual: T, message: String? = null) {\n    asserter.assertNotSame(message, illegal, actual)\n}\n\n/**\n * Asserts that [value] is of type [T], with an optional [message].\n *\n * Note that due to type erasure the type check may be partial (e.g. `assertIs<List<String>>(value)`\n * only checks for the class being [List] and not the type of its elements because it's erased).\n */\n@SinceKotlin(\"1.5\")\n@InlineOnly\n@OptIn(ExperimentalStdlibApi::class)\ninline fun <reified T> assertIs(value: Any?, message: String? = null): T {\n    contract { returns() implies (value is T) }\n    assertIsOfType(value, typeOf<T>(), value is T, message)\n    return value as T\n}\n\n@PublishedApi\ninternal fun assertIsOfType(value: Any?, type: KType, result: Boolean, message: String?) {\n    asserter.assertTrue({ messagePrefix(message) + \"Expected value to be of type <$type>, actual <${value?.let { it::class }}>.\" }, result)\n}\n\n/**\n * Asserts that [value] is not of type [T], with an optional [message].\n *\n * Note that due to type erasure the type check may be partial (e.g. `assertIsNot<List<String>>(value)`\n * only checks for the class being [List] and not the type of its elements because it's erased).\n */\n@SinceKotlin(\"1.5\")\n@InlineOnly\n@OptIn(ExperimentalStdlibApi::class)\ninline fun <reified T> assertIsNot(value: Any?, message: String? = null) {\n    assertIsNotOfType(value, typeOf<T>(), value !is T, message)\n}\n\n@PublishedApi\ninternal fun assertIsNotOfType(@Suppress(\"UNUSED_PARAMETER\") value: Any?, type: KType, result: Boolean, message: String?) {\n    asserter.assertTrue({ messagePrefix(message) + \"Expected value to not be of type <$type>.\" }, result)\n}\n\n/** Asserts that the [actual] value is not `null`, with an optional [message]. */\nfun <T : Any> assertNotNull(actual: T?, message: String? = null): T {\n    contract { returns() implies (actual != null) }\n    asserter.assertNotNull(message, actual)\n    return actual!!\n}\n\n/** Asserts that the [actual] value is not `null`, with an optional [message] and a function [block] to process the not-null value. */\n@JvmName(\"assertNotNullInline\")\n@InlineOnly\ninline fun <T : Any, R> assertNotNull(actual: T?, message: String? = null, block: (T) -> R) {\n    contract { returns() implies (actual != null) }\n    block(assertNotNull(actual, message))\n}\n\n/** Asserts that the [actual] value is `null`, with an optional [message]. */\nfun assertNull(actual: Any?, message: String? = null) {\n    asserter.assertNull(message, actual)\n}\n\n/** Asserts that the [iterable] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun <@OnlyInputTypes T> assertContains(iterable: Iterable<T>, element: T, message: String? = null) {\n    asserter.assertTrue(\n        { messagePrefix(message) + \"Expected the collection to contain the element.\\nCollection <$iterable>, element <$element>.\" },\n        iterable.contains(element)\n    )\n}\n\n/** Asserts that the [sequence] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun <@OnlyInputTypes T> assertContains(sequence: Sequence<T>, element: T, message: String? = null) {\n    asserter.assertTrue(\n        { messagePrefix(message) + \"Expected the sequence to contain the element.\\nSequence <$sequence>, element <$element>.\" },\n        sequence.contains(element)\n    )\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun <@OnlyInputTypes T> assertContains(array: Array<T>, element: T, message: String? = null) {\n    assertArrayContains(array, element, message, Array<T>::contains, Array<T>::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(array: ByteArray, element: Byte, message: String? = null) {\n    assertArrayContains(array, element, message, ByteArray::contains, ByteArray::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(array: ShortArray, element: Short, message: String? = null) {\n    assertArrayContains(array, element, message, ShortArray::contains, ShortArray::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(array: IntArray, element: Int, message: String? = null) {\n    assertArrayContains(array, element, message, IntArray::contains, IntArray::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(array: LongArray, element: Long, message: String? = null) {\n    assertArrayContains(array, element, message, LongArray::contains, LongArray::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(array: BooleanArray, element: Boolean, message: String? = null) {\n    assertArrayContains(array, element, message, BooleanArray::contains, BooleanArray::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(array: CharArray, element: Char, message: String? = null) {\n    assertArrayContains(array, element, message, CharArray::contains, CharArray::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContains(array: UByteArray, element: UByte, message: String? = null) {\n    assertArrayContains(array, element, message, UByteArray::contains, UByteArray::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContains(array: UShortArray, element: UShort, message: String? = null) {\n    assertArrayContains(array, element, message, UShortArray::contains, UShortArray::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContains(array: UIntArray, element: UInt, message: String? = null) {\n    assertArrayContains(array, element, message, UIntArray::contains, UIntArray::contentToString)\n}\n\n/** Asserts that the [array] contains the specified [element], with an optional [message]. */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContains(array: ULongArray, element: ULong, message: String? = null) {\n    assertArrayContains(array, element, message, ULongArray::contains, ULongArray::contentToString)\n}\n\n@kotlin.internal.InlineOnly\nprivate inline fun <@OnlyInputTypes A, E> assertArrayContains(\n    array: A,\n    element: E,\n    message: String? = null,\n    contains: A.(E) -> Boolean,\n    crossinline contentToString: A.() -> String\n) {\n    asserter.assertTrue(\n        { messagePrefix(message) + \"Expected the array to contain the element.\\nArray <${array.contentToString()}>, element <${element.toString()}>.\" }, // Explicitly call toString(): KT-45684\n        array.contains(element)\n    )\n}\n\n/** Asserts that the [range] contains the specified [value], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(range: IntRange, value: Int, message: String? = null) {\n    assertRangeContains(range, value, message, IntRange::contains)\n}\n\n/** Asserts that the [range] contains the specified [value], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(range: LongRange, value: Long, message: String? = null) {\n    assertRangeContains(range, value, message, LongRange::contains)\n}\n\n/** Asserts that the [range] contains the specified [value], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun <T : Comparable<T>> assertContains(range: ClosedRange<T>, value: T, message: String? = null) {\n    assertRangeContains(range, value, message, ClosedRange<T>::contains)\n}\n\n/** Asserts that the [range] contains the specified [value], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(range: CharRange, value: Char, message: String? = null) {\n    assertRangeContains(range, value, message, CharRange::contains)\n}\n\n/** Asserts that the [range] contains the specified [value], with an optional [message]. */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContains(range: UIntRange, value: UInt, message: String? = null) {\n    assertRangeContains(range, value, message, UIntRange::contains)\n}\n\n/** Asserts that the [range] contains the specified [value], with an optional [message]. */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContains(range: ULongRange, value: ULong, message: String? = null) {\n    assertRangeContains(range, value, message, ULongRange::contains)\n}\n\n@kotlin.internal.InlineOnly\nprivate inline fun <R, V> assertRangeContains(range: R, value: V, message: String? = null, contains: R.(V) -> Boolean) {\n    asserter.assertTrue(\n        { messagePrefix(message) + \"Expected the range <$range> to contain the value <${value.toString()}>.\" }, // Explicitly call toString(): KT-45684\n        range.contains(value)\n    )\n}\n\n/** Asserts that the [map] contains the specified [key], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun <@OnlyInputTypes K, V> assertContains(map: Map<K, V>, key: K, message: String? = null) {\n    asserter.assertTrue({ messagePrefix(message) + \"Expected the map to contain the key.\\nMap <$map>, key <$key>.\" }, map.containsKey(key))\n}\n\n/**\n * Asserts that the [charSequence] contains the specified [char], with an optional [message].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@SinceKotlin(\"1.5\")\nfun assertContains(charSequence: CharSequence, char: Char, ignoreCase: Boolean = false, message: String? = null) {\n    asserter.assertTrue(\n        { messagePrefix(message) + \"Expected the char sequence to contain the char.\\nCharSequence <$charSequence>, char <$char>, ignoreCase <$ignoreCase>.\" },\n        charSequence.contains(char, ignoreCase)\n    )\n}\n\n/**\n * Asserts that the [charSequence] contains the specified [other] char sequence as a substring, with an optional [message].\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@SinceKotlin(\"1.5\")\nfun assertContains(charSequence: CharSequence, other: CharSequence, ignoreCase: Boolean = false, message: String? = null) {\n    asserter.assertTrue(\n        { messagePrefix(message) + \"Expected the char sequence to contain the substring.\\nCharSequence <$charSequence>, substring <$other>, ignoreCase <$ignoreCase>.\" },\n        charSequence.contains(other, ignoreCase)\n    )\n}\n\n/** Asserts that the [charSequence] contains at least one match of the specified regular expression [regex], with an optional [message]. */\n@SinceKotlin(\"1.5\")\nfun assertContains(charSequence: CharSequence, regex: Regex, message: String? = null) {\n    asserter.assertTrue(\n        { messagePrefix(message) + \"Expected the char sequence to contain the regular expression.\\nCharSequence <$charSequence>, regex <$regex>.\" },\n        charSequence.contains(regex)\n    )\n}\n\n/**\n * Asserts that the [expected] iterable is *structurally* equal to the [actual] iterable,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n *\n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.5\")\nfun <@OnlyInputTypes T> assertContentEquals(expected: Iterable<T>?, actual: Iterable<T>?, message: String? = null) {\n    assertIterableContentEquals(\"Iterable\", message, expected, actual, Iterable<*>::iterator)\n}\n\n\n@SinceKotlin(\"1.5\")\n@Deprecated(\"'assertContentEquals' for Set arguments is ambiguous. Use 'assertEquals' to compare content with the unordered set equality, or cast one of arguments to Iterable to compare the set elements in order of iteration.\",\n            level = DeprecationLevel.ERROR,\n            replaceWith = ReplaceWith(\"assertContentEquals(expected, actual?.asIterable(), message)\"))\nfun <@OnlyInputTypes T> assertContentEquals(expected: Set<T>?, actual: Set<T>?, message: String? = null): Unit =\n    assertContentEquals(expected, actual?.asIterable(), message)\n\n/**\n * Asserts that the [expected] sequence is *structurally* equal to the [actual] sequence,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n *\n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.5\")\nfun <@OnlyInputTypes T> assertContentEquals(expected: Sequence<T>?, actual: Sequence<T>?, message: String? = null) {\n    assertIterableContentEquals(\"Sequence\", message, expected, actual, Sequence<*>::iterator)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n *\n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.5\")\nfun <@OnlyInputTypes T> assertContentEquals(expected: Array<T>?, actual: Array<T>?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, Array<*>::get, Array<*>?::contentToString, Array<*>?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\nfun assertContentEquals(expected: ByteArray?, actual: ByteArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, ByteArray::get, ByteArray?::contentToString, ByteArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\nfun assertContentEquals(expected: ShortArray?, actual: ShortArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, ShortArray::get, ShortArray?::contentToString, ShortArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\nfun assertContentEquals(expected: IntArray?, actual: IntArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, IntArray::get, IntArray?::contentToString, IntArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\nfun assertContentEquals(expected: LongArray?, actual: LongArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, LongArray::get, LongArray?::contentToString, LongArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n *\n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.5\")\nfun assertContentEquals(expected: FloatArray?, actual: FloatArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, FloatArray::get, FloatArray?::contentToString, FloatArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n *\n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.5\")\nfun assertContentEquals(expected: DoubleArray?, actual: DoubleArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, DoubleArray::get, DoubleArray?::contentToString, DoubleArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\nfun assertContentEquals(expected: BooleanArray?, actual: BooleanArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, BooleanArray::get, BooleanArray?::contentToString, BooleanArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\nfun assertContentEquals(expected: CharArray?, actual: CharArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, CharArray::get, CharArray?::contentToString, CharArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContentEquals(expected: UByteArray?, actual: UByteArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, UByteArray::get, UByteArray?::contentToString, UByteArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContentEquals(expected: UShortArray?, actual: UShortArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, UShortArray::get, UShortArray?::contentToString, UShortArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContentEquals(expected: UIntArray?, actual: UIntArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, UIntArray::get, UIntArray?::contentToString, UIntArray?::contentEquals)\n}\n\n/**\n * Asserts that the [expected] array is *structurally* equal to the [actual] array,\n * i.e. contains the same number of the same elements in the same order, with an optional [message].\n */\n@SinceKotlin(\"1.5\")\n@OptIn(ExperimentalUnsignedTypes::class)\nfun assertContentEquals(expected: ULongArray?, actual: ULongArray?, message: String? = null) {\n    assertArrayContentEquals(message, expected, actual, { it.size }, ULongArray::get, ULongArray?::contentToString, ULongArray?::contentEquals)\n}\n\n/** Marks a test as having failed if this point in the execution path is reached, with an optional [message]. */\nfun fail(message: String? = null): Nothing {\n    asserter.fail(message)\n}\n\n/**\n * Marks a test as having failed if this point in the execution path is reached, with an optional [message]\n * and [cause] exception.\n *\n * The [cause] exception is set as the root cause of the test failure.\n */\n@SinceKotlin(\"1.4\")\nfun fail(message: String? = null, cause: Throwable? = null): Nothing {\n    asserter.fail(message, cause)\n}\n\n/** Asserts that given function [block] returns the given [expected] value. */\n@JvmName(\"expectInline\")\n@InlineOnly\ninline fun <@OnlyInputTypes T> expect(expected: T, block: () -> T) {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    assertEquals(expected, block())\n}\n\n/** Asserts that given function [block] returns the given [expected] value and use the given [message] if it fails. */\n@JvmName(\"expectInline\")\n@InlineOnly\ninline fun <@OnlyInputTypes T> expect(expected: T, message: String?, block: () -> T) {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    assertEquals(expected, block(), message)\n}\n\n/**\n * Asserts that given function [block] fails by throwing an exception.\n *\n * @return An exception that was expected to be thrown and was successfully caught.\n * The returned exception can be inspected further, for example by asserting its property values.\n */\n@InlineOnly\n@JvmName(\"assertFailsInline\")\ninline fun assertFails(block: () -> Unit): Throwable =\n    checkResultIsFailure(null, runCatching(block))\n\n/**\n * Asserts that given function [block] fails by throwing an exception.\n *\n * If the assertion fails, the specified [message] is used unless it is null as a prefix for the failure message.\n *\n * @return An exception that was expected to be thrown and was successfully caught.\n * The returned exception can be inspected further, for example by asserting its property values.\n */\n@SinceKotlin(\"1.1\")\n@InlineOnly\n@JvmName(\"assertFailsInline\")\ninline fun assertFails(message: String?, block: () -> Unit): Throwable =\n    checkResultIsFailure(message, runCatching(block))\n\n@PublishedApi\ninternal fun checkResultIsFailure(message: String?, blockResult: Result<Unit>): Throwable {\n    blockResult.fold(\n        onSuccess = {\n            asserter.fail(messagePrefix(message) + \"Expected an exception to be thrown, but was completed successfully.\")\n        },\n        onFailure = { e ->\n            return e\n        }\n    )\n}\n\n/** Asserts that a [block] fails with a specific exception of type [T] being thrown.\n *\n * If the assertion fails, the specified [message] is used unless it is null as a prefix for the failure message.\n *\n * @return An exception of the expected exception type [T] that successfully caught.\n * The returned exception can be inspected further, for example by asserting its property values.\n */\n@InlineOnly\ninline fun <reified T : Throwable> assertFailsWith(message: String? = null, block: () -> Unit): T =\n    assertFailsWith(T::class, message, block)\n\n/**\n * Asserts that a [block] fails with a specific exception of type [exceptionClass] being thrown.\n *\n * @return An exception of the expected exception type [T] that successfully caught.\n * The returned exception can be inspected further, for example by asserting its property values.\n */\n@InlineOnly\n@JvmName(\"assertFailsWithInline\")\ninline fun <T : Throwable> assertFailsWith(exceptionClass: KClass<T>, block: () -> Unit): T = assertFailsWith(exceptionClass, null, block)\n\n/**\n * Asserts that a [block] fails with a specific exception of type [exceptionClass] being thrown.\n *\n * If the assertion fails, the specified [message] is used unless it is null as a prefix for the failure message.\n *\n * @return An exception of the expected exception type [T] that successfully caught.\n * The returned exception can be inspected further, for example by asserting its property values.\n */\n@InlineOnly\n@JvmName(\"assertFailsWithInline\")\ninline fun <T : Throwable> assertFailsWith(exceptionClass: KClass<T>, message: String?, block: () -> Unit): T =\n    checkResultIsFailure(exceptionClass, message, runCatching(block))\n\n/** Platform-specific construction of AssertionError with cause */\ninternal expect fun AssertionErrorWithCause(message: String?, cause: Throwable?): AssertionError\n\n/**\n * Abstracts the logic for performing assertions. Specific implementations of [Asserter] can use JUnit\n * or TestNG assertion facilities.\n */\ninterface Asserter {\n    /**\n     * Fails the current test with the specified message.\n     *\n     * @param message the message to report.\n     */\n    fun fail(message: String?): Nothing\n\n    /**\n     * Fails the current test with the specified message and cause exception.\n     *\n     * @param message the message to report.\n     * @param cause the exception to set as the root cause of the reported failure.\n     */\n    @SinceKotlin(\"1.4\")\n    fun fail(message: String?, cause: Throwable?): Nothing\n\n    /**\n     * Asserts that the specified value is `true`.\n     *\n     * @param lazyMessage the function to return a message to report if the assertion fails.\n     */\n    fun assertTrue(lazyMessage: () -> String?, actual: Boolean): Unit {\n        if (!actual) {\n            fail(lazyMessage())\n        }\n    }\n\n    /**\n     * Asserts that the specified value is `true`.\n     *\n     * @param message the message to report if the assertion fails.\n     */\n    fun assertTrue(message: String?, actual: Boolean): Unit {\n        assertTrue({ message }, actual)\n    }\n\n    /**\n     * Asserts that the specified values are equal.\n     *\n     * @param message the message to report if the assertion fails.\n     */\n    fun assertEquals(message: String?, expected: Any?, actual: Any?): Unit {\n        assertTrue({ messagePrefix(message) + \"Expected <$expected>, actual <$actual>.\" }, actual == expected)\n    }\n\n    /**\n     * Asserts that the specified values are not equal.\n     *\n     * @param message the message to report if the assertion fails.\n     */\n    fun assertNotEquals(message: String?, illegal: Any?, actual: Any?): Unit {\n        assertTrue({ messagePrefix(message) + \"Illegal value: <$actual>.\" }, actual != illegal)\n    }\n\n    /**\n     * Asserts that the specified values are the same instance.\n     *\n     * @param message the message to report if the assertion fails.\n     */\n    fun assertSame(message: String?, expected: Any?, actual: Any?): Unit {\n        assertTrue({ messagePrefix(message) + \"Expected <$expected>, actual <$actual> is not same.\" }, actual === expected)\n    }\n\n    /**\n     * Asserts that the specified values are not the same instance.\n     *\n     * @param message the message to report if the assertion fails.\n     */\n    fun assertNotSame(message: String?, illegal: Any?, actual: Any?): Unit {\n        assertTrue({ messagePrefix(message) + \"Expected not same as <$actual>.\" }, actual !== illegal)\n    }\n\n    /**\n     * Asserts that the specified value is `null`.\n     *\n     * @param message the message to report if the assertion fails.\n     */\n    fun assertNull(message: String?, actual: Any?): Unit {\n        assertTrue({ messagePrefix(message) + \"Expected value to be null, but was: <$actual>.\" }, actual == null)\n    }\n\n    /**\n     * Asserts that the specified value is not `null`.\n     *\n     * @param message the message to report if the assertion fails.\n     */\n    fun assertNotNull(message: String?, actual: Any?): Unit {\n        assertTrue({ messagePrefix(message) + \"Expected value to be not null.\" }, actual != null)\n    }\n\n}\n\n/**\n * Checks applicability and provides Asserter instance\n */\ninterface AsserterContributor {\n    /**\n     * Provides [Asserter] instance or `null` depends on the current context.\n     *\n     * @return asserter instance or null if it is not applicable now\n     */\n    fun contribute(): Asserter?\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the collection was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"this.maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"this.maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"this.maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"this.minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"this.minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"this.minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.uppercase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.lowercase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.uppercase()\n                s2 = s2.uppercase()\n                if (s1 != s2) {\n                    s1 = s1.lowercase()\n                    s2 = s2.lowercase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean = contentEqualsImpl(other)\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean {\n    return if (ignoreCase)\n        this.contentEqualsIgnoreCaseImpl(other)\n    else\n        this.contentEqualsImpl(other)\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n",null,null,null],"names":[],"mappings":"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}